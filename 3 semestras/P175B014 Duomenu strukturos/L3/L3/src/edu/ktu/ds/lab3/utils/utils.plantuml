@startuml

title __UTILS's Class Diagram__\n

  namespace edu.ktu.ds.lab3.utils {
    interface edu.ktu.ds.lab3.utils.EvaluableMap {
        {abstract} + getChainsCounter()
        {abstract} + getLastUpdatedChain()
        {abstract} + getMaxChainSize()
        {abstract} + getRehashesCounter()
        {abstract} + getTableCapacity()
    }
  }
  

  namespace edu.ktu.ds.lab3.utils {
    class edu.ktu.ds.lab3.utils.HashMap {
        {static} + DEFAULT_HASH_TYPE : HashType
        {static} + DEFAULT_INITIAL_CAPACITY : int
        {static} + DEFAULT_LOAD_FACTOR : float
        # chainsCounter : int
        # index : int
        # lastUpdatedChain : int
        # loadFactor : float
        # maxChainSize : int
        # rehashesCounter : int
        # size : int
        # table : Node<K, V>[]
        + HashMap()
        + HashMap()
        + HashMap()
        + HashMap()
        + HashMap()
        + clear()
        + contains()
        + get()
        + getChainsCounter()
        + getLastUpdatedChain()
        + getMaxChainSize()
        + getRehashesCounter()
        + getTableCapacity()
        + isEmpty()
        + put()
        + remove()
        + size()
        + toArray()
        + toString()
        - getInChain()
        - hash()
        - rehash()
    }
  }
  

  namespace edu.ktu.ds.lab3.utils {
    class edu.ktu.ds.lab3.utils.HashMap.Node {
        # next : Node<K, V>
        + toString()
        # Node()
        # Node()
    }
  }
  

  namespace edu.ktu.ds.lab3.utils {
    enum HashType {
      DIVISION
      JCF7
      JCF8
      MULTIPLICATION
    }
  }
  

  namespace edu.ktu.ds.lab3.utils {
    class edu.ktu.ds.lab3.utils.Ks {
        {static} - dataFolder : String
        {static} - errorNr : int
        {static} - formatStartOfLine : boolean
        {static} - keyboard : BufferedReader
        {static} - lineNr : int
        {static} - serr : PrintStream
        {static} - sout : PrintStream
        {static} + er()
        {static} + erf()
        {static} + ern()
        {static} + getDataFolder()
        {static} + giveDouble()
        {static} + giveDouble()
        {static} + giveFileName()
        {static} + giveInt()
        {static} + giveInt()
        {static} + giveLong()
        {static} + giveLong()
        {static} + giveString()
        {static} + ou()
        {static} + ouf()
        {static} + oufln()
        {static} + oun()
        {static} + ounn()
        {static} + out()
        {static} + setDataFolder()
    }
  }
  

  namespace edu.ktu.ds.lab3.utils {
    interface edu.ktu.ds.lab3.utils.Map {
        {abstract} + clear()
        {abstract} + contains()
        {abstract} + get()
        {abstract} + isEmpty()
        {abstract} + put()
        {abstract} + remove()
        {abstract} + size()
        {abstract} + toArray()
    }
  }
  

  namespace edu.ktu.ds.lab3.utils {
    interface edu.ktu.ds.lab3.utils.Parsable {
        {abstract} + parse()
    }
  }
  

  namespace edu.ktu.ds.lab3.utils {
    class edu.ktu.ds.lab3.utils.ParsableHashMap {
        - keyCreateFunction : Function<String, K>
        - valueCreateFunction : Function<String, V>
        + ParsableHashMap()
        + ParsableHashMap()
        + ParsableHashMap()
        + ParsableHashMap()
        + getModelList()
        + load()
        + println()
        + println()
        + put()
        + save()
        {static} - create()
        - split()
    }
  }
  

  namespace edu.ktu.ds.lab3.utils {
    interface edu.ktu.ds.lab3.utils.ParsableMap {
        {abstract} + getModelList()
        {abstract} + load()
        {abstract} + println()
        {abstract} + println()
        {abstract} + put()
        {abstract} + save()
    }
  }
  

  edu.ktu.ds.lab3.utils.HashMap .up.|> edu.ktu.ds.lab3.utils.EvaluableMap
  edu.ktu.ds.lab3.utils.HashMap o-- edu.ktu.ds.lab3.utils.HashType : ht
  edu.ktu.ds.lab3.utils.HashMap +-down- edu.ktu.ds.lab3.utils.HashMap.Node
  edu.ktu.ds.lab3.utils.HashMap.Node o-- K : key
  edu.ktu.ds.lab3.utils.HashMap.Node o-- V : value
  edu.ktu.ds.lab3.utils.ParsableHashMap .up.|> edu.ktu.ds.lab3.utils.ParsableMap
  edu.ktu.ds.lab3.utils.ParsableHashMap -up-|> edu.ktu.ds.lab3.utils.HashMap


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
